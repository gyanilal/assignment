{"version":3,"sources":["App.js","action.js","serviceWorker.js","reducer.js","index.js"],"names":["App","props","state","data","this","addTodo","setTimeout","setState","todos","className","length","role","scope","map","value","index","key","title","onClick","Component","connect","id","dispatch","fetch","method","redirect","then","response","json","result","type","catch","error","console","log","Boolean","window","location","hostname","match","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0QAMMA,G,8DACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHQ,E,gEAME,IAAD,OACjBC,KAAKH,MAAMI,UACXC,YAAW,WACT,EAAKC,SAAS,CAACJ,KAAK,EAAKF,MAAMO,UAC/B,O,+BAIQ,IAAD,OAEL,OACI,yBAAKC,UAAU,wBACbL,KAAKF,MAAMC,KAAKO,OAAQ,EACxB,yBAAKD,UAAU,mBACf,yBAAKA,UAAU,8BAA8BE,KAAK,UAC9C,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,gCAAgCE,KAAK,UAClD,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,8BAA8BE,KAAK,UAChD,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,6BAA6BE,KAAK,UAC/C,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,8BAA8BE,KAAK,UAChD,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,2BAA2BE,KAAK,UAC7C,0BAAMF,UAAU,WAAhB,eAEF,yBAAKA,UAAU,4BAA4BE,KAAK,UAC9C,0BAAMF,UAAU,WAAhB,gBAIN,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACf,2BAAOA,UAAU,SACjB,2BAAOA,UAAU,cACf,4BACE,wBAAIG,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,WAGJ,+BACER,KAAKF,MAAMC,KAAKA,KAAKU,KAAI,SAACC,EAAMC,GAAP,OAEzB,wBAAIC,IAAOD,GACT,wBAAIH,MAAM,OAAOG,EAAM,GACvB,4BAAKD,EAAMG,cAOjB,yBAAKR,UAAU,oBACb,4BAAQA,UAAU,kBAAkBS,QAAS,kBAAM,EAAKjB,MAAMI,YAA9D,2B,GAlEIc,cAqFHC,eARS,SAAAlB,GAAK,MAAK,CAChCM,MAAON,EAAMmB,OAGY,SAAAC,GAAQ,MAAK,CACtCjB,QAAS,kBAAMiB,GCvFY,SAACA,GAMhBC,MADH,mCAJW,CACnBC,OAAQ,MACRC,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAEN,OAAOP,EAAS,CACfQ,KAAM,WACNT,GAAIQ,OAGLE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,aD2EzBZ,CAGXpB,GElFgBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCRS/B,EAVD,WAAsB,IAArBN,EAAoB,uDAAd,GAAGsC,EAAW,uCAClC,OAAOA,EAAOV,MACb,IAAK,WACJ,OAAO,2BAAK5B,GAAZ,IACCmB,GAAImB,EAAOnB,KAEb,QACC,OAAOnB,ICIJuC,EAAQC,YAAYC,EAAYC,YAAgBC,MACtDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAECO,SAASC,eAAe,SFmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.fa43a04a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from './action';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data :[]\n    }\n  }\n  componentDidMount(){\n    this.props.addTodo()\n    setTimeout(() => {\n      this.setState({data:this.props.todos})\n    },5000)\n    // this.setState({data:this.props.todos})\n  }\n\n    render() {\n        \n        return (\n            <div className='product-list-wrapper'>\n            { this.state.data.length <1 ? (\n              <div className=\"row spinner_cls\">\n              <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-secondary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-success\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-danger\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-warning\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-info\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n                <div className=\"spinner-border text-light\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n              </div>\n            ):(\n            <div className=\"row\">\n              <div className=\"col-6\">\n              <table className=\"table\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Tweet</th>\n                </tr>\n              </thead>\n              <tbody>\n              { this.state.data.data.map((value,index) => (\n\n                <tr key = {index}>\n                  <th scope=\"row\">{index+1}</th>\n                  <td>{value.title}</td>\n                </tr>\n\n                ))}\n              </tbody>\n            </table>\n            </div>\n            <div className=\"col-6 button_css\">\n              <button className=\"btn btn-primary\" onClick={() => this.props.addTodo()}>Fetch New Tweets</button>\n            </div>\n            </div>\n            )\n          }\n               \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n  todos: state.id\n})\n\nconst mapDispatchToProps = dispatch => ({\n  addTodo: () => dispatch(addTodo())\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n  )(App)","\nexport const addTodo = () => (dispatch:any) =>{\n\tvar requestOptions = {\n\t  method: 'GET',\n\t  redirect: 'follow'\n\t};\n\tlet url = \"http://127.0.0.1:8000/api/tweets\";\n\tlet result = fetch(url, requestOptions)\n\t  .then(response => response.json())\n\t  .then((result) => {\n\t  \t// console.log(result)\n\t  \treturn dispatch({\n\t  \t\ttype: 'ADD_TODO',\n\t  \t\tid: result\n\t  \t})\n\t  })\n\t  .catch(error => console.log('error', error));\n\t  \n\t\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = (state=[],action) => {\n\tswitch(action.type){\n\t\tcase 'ADD_TODO':\n\t\t\treturn { ...state,\n\t\t\t\tid: action.id\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state \n\t}\n}\nexport default todos;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer,applyMiddleware(thunk));\nReactDOM.render(\n \t<Provider store={store}>\n \t\t<App />\n \t</Provider>\n \t, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}